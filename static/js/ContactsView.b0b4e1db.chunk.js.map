{"version":3,"sources":["components/ContactForm/ContactForm.module.css","components/ContactList/ContactItem/ContactItem.module.css","components/Filter/Filter.module.css","views/ContactsView/ContactsView.module.css","components/ContactForm/ContactForm.jsx","components/ContactForm/ContactForm.container.jsx","components/ContactList/ContactItem/ContactItem.jsx","components/ContactList/ContactList.jsx","components/ContactList/ContactList.container.jsx","components/Filter/Filter.jsx","components/Filter/Filter.container.jsx","views/ContactsView/ContactsView.jsx"],"names":["module","exports","ContactForm","state","name","number","notifyWarn","text","toast","warn","notifySuccess","success","handleChange","e","currentTarget","value","setState","replace","isValidContact","newContact","toLowerCase","items","props","find","contact","reset","handleSubmit","preventDefault","addContact","this","MyButton","styled","MaterialButton","width","backgroundColor","color","boxShadow","className","styles","form","onSubmit","TextField","input","size","label","variant","type","onChange","id","nameInputId","autoComplete","numberInputId","Component","connect","contactsSelectors","getItems","dispatch","contactsOperations","fontSize","padding","MyListItem","ListItem","borderBottom","display","ContactItem","onDelete","item","ListItemText","info","ListItemSecondaryAction","delete","onClick","ContactList","contacts","deleteContact","List","map","filteredItems","contactId","Filter","resetFilter","filter","getFilter","contactsActions","changeFilter","ContactsView","fetchContacts","title","contactsSection","length","position","autoClose","newestOnTop","limit","transition","Zoom"],"mappings":"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","file":"static/js/ContactsView.b0b4e1db.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"ContactForm_form__cC2zk\",\"input\":\"ContactForm_input__2m91q\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"info\":\"ContactItem_info__1E5wG\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formTitle\":\"Filter_formTitle__1SQrL\",\"input\":\"Filter_input__2cOng\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"ContactsView_title__eRFQG\",\"contactsSection\":\"ContactsView_contactsSection__VrEsd\"};","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport styles from './ContactForm.module.css';\r\nimport { toast } from 'react-toastify';\r\n\r\nimport MaterialButton from '@material-ui/core/Button';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport { styled } from '@material-ui/core/styles';\r\n\r\nclass ContactForm extends Component {\r\n  state = {\r\n    name: '',\r\n    number: '',\r\n  };\r\n\r\n  notifyWarn = text => toast.warn(text);\r\n  notifySuccess = text => toast.success(text);\r\n\r\n  handleChange = e => {\r\n    const { name, value } = e.currentTarget;\r\n    name === 'number'\r\n      ? this.setState({ [name]: value.replace(/[^\\d-]/g, '') })\r\n      : this.setState({ [name]: value });\r\n  };\r\n\r\n  isValidContact = newContact => {\r\n    const name = newContact.name.toLowerCase();\r\n    const { number } = newContact;\r\n    const { items } = this.props;\r\n\r\n    if (name === '' || number === '') {\r\n      this.notifyWarn(`Please enter name and number`);\r\n      return true;\r\n    }\r\n\r\n    if (items.find(contact => contact.name.toLowerCase() === name)) {\r\n      this.notifyWarn(`${newContact.name} is already in contacts.`);\r\n      return true;\r\n    }\r\n  };\r\n\r\n  reset = () => {\r\n    this.setState({\r\n      name: '',\r\n      number: '',\r\n    });\r\n  };\r\n\r\n  handleSubmit = e => {\r\n    e.preventDefault();\r\n\r\n    const newContact = { ...this.state };\r\n    if (!this.isValidContact(newContact)) {\r\n      const { addContact } = this.props;\r\n\r\n      addContact(newContact);\r\n      this.notifySuccess('Added successfully');\r\n      this.reset();\r\n    }\r\n  };\r\n\r\n  render() {\r\n    const { name, number } = this.state;\r\n\r\n    const MyButton = styled(MaterialButton)({\r\n      width: 'fit-content',\r\n      backgroundColor: 'olive',\r\n      color: 'rgba(0, 0, 0, 0.87)',\r\n      boxShadow: '2px 2px 3px 0px rgba(0, 0, 0, 0.25)',\r\n    });\r\n\r\n    return (\r\n      <form className={styles.form} onSubmit={this.handleSubmit}>\r\n        <TextField\r\n          className={styles.input}\r\n          size=\"small\"\r\n          label=\"Name\"\r\n          variant=\"outlined\"\r\n          type=\"text\"\r\n          name=\"name\"\r\n          value={name}\r\n          onChange={this.handleChange}\r\n          id={this.nameInputId}\r\n          autoComplete=\"off\"\r\n        />\r\n\r\n        <TextField\r\n          size=\"small\"\r\n          label=\"Number\"\r\n          variant=\"outlined\"\r\n          className={styles.input}\r\n          type=\"tel\"\r\n          name=\"number\"\r\n          value={number}\r\n          onChange={this.handleChange}\r\n          id={this.numberInputId}\r\n          autoComplete=\"off\"\r\n        />\r\n\r\n        <MyButton type=\"submit\">Add contact</MyButton>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nContactForm.propTypes = {\r\n  addContact: PropTypes.func.isRequired,\r\n  items: PropTypes.array.isRequired,\r\n};\r\n\r\nexport default ContactForm;\r\n","import { connect } from 'react-redux';\r\nimport { contactsOperations, contactsSelectors } from '../../redux/contacts';\r\nimport ContactForm from './ContactForm';\r\n\r\nconst mapStateToProps = state => ({\r\n  items: contactsSelectors.getItems(state),\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  addContact: newContact => dispatch(contactsOperations.addContact(newContact)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactForm);","import React from 'react';\r\nimport styles from './ContactItem.module.css';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemSecondaryAction from '@material-ui/core/ListItemSecondaryAction';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport MaterialButton from '@material-ui/core/Button';\r\nimport { styled } from '@material-ui/core/styles';\r\n\r\nconst MyButton = styled(MaterialButton)({\r\n  backgroundColor: 'olive',\r\n  fontSize: '10px',\r\n  color: 'rgba(0, 0, 0, 0.87)',\r\n  boxShadow: '2px 2px 3px 0px rgba(0, 0, 0, 0.25)',\r\n  padding: '2px 8px',\r\n});\r\n\r\nconst MyListItem = styled(ListItem)({\r\n  padding: '8px 0 8px 10px',\r\n  borderBottom: '1px solid olive',\r\n  display: 'inline-block',\r\n});\r\n\r\nconst ContactItem = ({ name, number, onDelete }) => (\r\n  <MyListItem className={styles.item}>\r\n    <ListItemText className={styles.info}>{name}:</ListItemText>\r\n    <ListItemText className={styles.info}>{number}</ListItemText>\r\n    <ListItemSecondaryAction>\r\n      <MyButton className={styles.delete} onClick={onDelete} type=\"button\">\r\n        Delete\r\n      </MyButton>\r\n    </ListItemSecondaryAction>\r\n  </MyListItem>\r\n);\r\n\r\nContactItem.propTypes = {\r\n  name: PropTypes.string.isRequired,\r\n  number: PropTypes.string.isRequired,\r\n  onDelete: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default ContactItem;","import React from 'react';\r\nimport ContactItem from './ContactItem';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport List from '@material-ui/core/List';\r\n\r\nconst ContactList = ({ contacts, deleteContact }) => {\r\n  return (\r\n    <List>\r\n      {contacts &&\r\n        contacts.map(({ id, name, number }) => (\r\n          <ContactItem\r\n            key={id}\r\n            name={name}\r\n            number={number}\r\n            onDelete={() => deleteContact(id)}\r\n          />\r\n        ))}\r\n    </List>\r\n  );\r\n};\r\n\r\nContactList.propTypes = {\r\n  contacts: PropTypes.array.isRequired,\r\n  deleteContact: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default ContactList;","import { connect } from 'react-redux';\r\nimport { contactsOperations, contactsSelectors } from '../../redux/contacts';\r\nimport ContactList from './ContactList';\r\n\r\nconst mapStateToProps = state => ({\r\n  contacts: contactsSelectors.filteredItems(state),\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  deleteContact: contactId =>\r\n    dispatch(contactsOperations.deleteContact(contactId)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactList);","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport styles from './Filter.module.css';\r\n\r\nimport TextField from '@material-ui/core/TextField';\r\n\r\nclass Filter extends Component {\r\n  componentWillUnmount() {\r\n    this.props.resetFilter();\r\n  }\r\n\r\n  render() {\r\n    const { filter, onChange } = this.props;\r\n\r\n    return (\r\n      <TextField\r\n        className={styles.input}\r\n        type=\"text\"\r\n        value={filter}\r\n        onChange={onChange}\r\n        label=\"Find contacts by name\"\r\n        size=\"small\"\r\n        variant=\"outlined\"\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nFilter.propTypes = {\r\n  filter: PropTypes.string.isRequired,\r\n  onChange: PropTypes.func.isRequired,\r\n  resetFilter: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default Filter;","  \r\nimport { connect } from 'react-redux';\r\nimport { contactsActions, contactsSelectors } from '../../redux/contacts';\r\nimport Filter from './Filter';\r\n\r\nconst mapStateToProps = state => ({\r\n  filter: contactsSelectors.getFilter(state),\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  onChange: e => dispatch(contactsActions.changeFilter(e.currentTarget.value)),\r\n  resetFilter: () => dispatch(contactsActions.resetFilter()),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport ContactForm from '../../components/ContactForm';\r\nimport ContactList from '../../components/ContactList';\r\nimport Filter from '../../components/Filter';\r\nimport { ToastContainer, Zoom } from 'react-toastify';\r\nimport { connect } from 'react-redux';\r\nimport { contactsOperations, contactsSelectors } from '../../redux/contacts';\r\nimport styles from './ContactsView.module.css';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\n\r\nclass ContactsView extends Component {\r\n  componentDidMount() {\r\n    this.props.fetchContacts();\r\n  }\r\n\r\n  render() {\r\n    const { items } = this.props;\r\n\r\n    return (\r\n      <>\r\n        <h1 className={styles.title}>Phonebook</h1>\r\n        <ContactForm />\r\n        <h2 className={styles.title}>Contacts</h2>\r\n        <section className={styles.contactsSection}>\r\n          {items.length > 1 && <Filter />}\r\n          {items.length > 0 ? (\r\n            <ContactList />\r\n          ) : (\r\n            <p>The contact list is empty. Please add a new contact.</p>\r\n          )}\r\n          <ToastContainer\r\n            position=\"top-center\"\r\n            autoClose={2000}\r\n            newestOnTop\r\n            limit={3}\r\n            transition={Zoom}\r\n          />\r\n        </section>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  items: contactsSelectors.getItems(state),\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  fetchContacts: () => dispatch(contactsOperations.fetchContacts()),\r\n});\r\n\r\nContactsView.propTypes = {\r\n  items: PropTypes.array.isRequired,\r\n  fetchContacts: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactsView);"],"sourceRoot":""}