{"version":3,"sources":["components/ContactForm/ContactForm.module.css","components/Filter/Filter.module.css","components/ContactItem/ContactItem.module.css","components/ContactList/ContactList.module.css","transitions/title.module.css","transitions/pop.module.css","redux/contacts/contacts-actions.jsx","redux/contacts/contacts-operations.jsx","redux/contacts/contacts-reducer.jsx","redux/contacts/contacts-selectors.jsx","components/ContactForm/ContactForm.jsx","components/ContactForm/ContactForm.container.jsx","components/Filter/Filter.jsx","components/Filter/Filter.container.jsx","components/ContactItem/ContactItem.jsx","components/ContactList/ContactList.jsx","components/ContactList/ContactList.container.jsx","App.js","redux/store.jsx","index.js"],"names":["module","exports","fetchContactsRequest","createAction","fetchContactsSuccess","fetchContactsError","addContactRequest","addContactSuccess","addContactError","deleteContactRequest","deleteContactSuccess","deleteContactError","changeFilter","resetFilter","actionsContacts","axios","defaults","baseURL","deleteContact","contactId","dispatch","delete","then","catch","error","fetchContacts","get","data","addContact","newContact","post","items","createReducer","_","payload","state","filter","id","loading","combineReducers","getItems","contacts","getFilter","filteredItems","createSelector","normalizedFilter","toLowerCase","name","includes","ContactForm","number","notifyWarn","text","toast","warn","notifySuccess","success","handleChange","e","currentTarget","value","setState","replace","isValidContact","props","find","contact","reset","handleSubmit","preventDefault","this","onSubmit","className","s","form","label","input","type","onChange","nameInputId","numberInputId","button","Component","connect","contactsSelectors","contactsOperations","Filter","htmlFor","contactsActions","ContactItem","onDelete","item","info","onClick","ContactList","list","map","App","CSSTransition","in","timeout","classNames","titleTransition","appear","length","popTransition","unmountOnExit","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","store","configureStore","reducer","contactsReducer","devTools","process","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.98c3ed38.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"ContactForm_form__cC2zk\",\"label\":\"ContactForm_label__1zJ69\",\"input\":\"ContactForm_input__2m91q\",\"button\":\"ContactForm_button__1qT_y\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"filter\":\"Filter_filter__KoL3u\",\"label\":\"Filter_label__n2Qpr\",\"input\":\"Filter_input__2cOng\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"ContactItem_item__13kzl\",\"info\":\"ContactItem_info__1916Y\",\"delete\":\"ContactItem_delete__kqJLH\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"ContactList_list__1h6nF\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"appear\":\"title_appear__3vipc\",\"appearActive\":\"title_appearActive__mndpb\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"enter\":\"pop_enter__hTBTU\",\"enterActive\":\"pop_enterActive__1Fi2v\",\"exit\":\"pop_exit__2OP8M\",\"exitActive\":\"pop_exitActive__3nV6J\"};","import { createAction } from '@reduxjs/toolkit';\r\n\r\nconst fetchContactsRequest = createAction('contacts/fetchContactsRequest');\r\nconst fetchContactsSuccess = createAction('contacts/fetchContactsSuccess');\r\nconst fetchContactsError = createAction('contacts/fetchContactsError');\r\n\r\nconst addContactRequest = createAction('contacts/addContactRequest');\r\nconst addContactSuccess = createAction('contacts/addContactSuccess');\r\nconst addContactError = createAction('contacts/addContactError');\r\n\r\nconst deleteContactRequest = createAction('contacts/deleteContactRequest');\r\nconst deleteContactSuccess = createAction('contacts/deleteContactSuccess');\r\nconst deleteContactError = createAction('contacts/deleteContactError');\r\n\r\nconst changeFilter = createAction('contacts/changeFilter');\r\n\r\nconst resetFilter = createAction('contscts/resetFilter');\r\n\r\nexport default { fetchContactsRequest, fetchContactsSuccess, fetchContactsError, addContactRequest, addContactSuccess, addContactError, deleteContactRequest, deleteContactSuccess, deleteContactError, changeFilter, resetFilter };\r\n","import axios from 'axios';\r\nimport actionsContacts from './contacts-actions';\r\n\r\nconst {\r\n  fetchContactsRequest,\r\n  fetchContactsSuccess,\r\n  fetchContactsError,\r\n  addContactRequest,\r\n  addContactSuccess,\r\n  addContactError,\r\n  deleteContactRequest,\r\n  deleteContactSuccess,\r\n  deleteContactError,\r\n} = actionsContacts;\r\n\r\naxios.defaults.baseURL = 'http://localhost:4040';\r\n\r\nconst fetchContacts = () => dispatch => {\r\n  dispatch(fetchContactsRequest());\r\n\r\n  axios\r\n    .get('/contacts')\r\n    .then(({ data }) => dispatch(fetchContactsSuccess(data)))\r\n    .catch(error => dispatch(fetchContactsError(error)));\r\n};\r\n\r\nconst addContact = newContact => dispatch => {\r\n  dispatch(addContactRequest());\r\n\r\n  axios\r\n    .post('/contacts', newContact)\r\n    .then(({ data }) => dispatch(addContactSuccess(data)))\r\n    .catch(error => dispatch(addContactError(error)));\r\n};\r\n\r\nconst deleteContact = contactId => dispatch => {\r\n  dispatch(deleteContactRequest());\r\n\r\n  axios\r\n    .delete(`/contacts/${contactId}`)\r\n    .then(() => dispatch(deleteContactSuccess(contactId)))\r\n    .catch(error => dispatch(deleteContactError(error)));\r\n};\r\n\r\nexport default { fetchContacts, addContact, deleteContact, deleteContact };","import { combineReducers } from 'redux';\r\nimport { createReducer } from '@reduxjs/toolkit';\r\nimport actionsContacts from './contacts-actions';\r\n\r\nconst items = createReducer([], {\r\n  [actionsContacts.fetchContactsSuccess]: (_, { payload }) => payload,\r\n  [actionsContacts.addContactSuccess]: (state, { payload }) => [payload, ...state],\r\n  [actionsContacts.deleteContactSuccess]: (state, { payload }) =>\r\n    state.filter(({ id }) => id !== payload),\r\n});\r\n\r\nconst filter = createReducer('', {\r\n  [actionsContacts.changeFilter]: (_, { payload }) => payload,\r\n  [actionsContacts.resetFilter]: () => '',\r\n});\r\n\r\nconst loading = createReducer(false, {\r\n  [actionsContacts.fetchContactsRequest]: () => true,\r\n  [actionsContacts.fetchContactsSuccess]: () => false,\r\n  [actionsContacts.fetchContactsError]: () => false,\r\n  [actionsContacts.addContactRequest]: () => true,\r\n  [actionsContacts.addContactSuccess]: () => false,\r\n  [actionsContacts.addContactError]: () => false,\r\n  [actionsContacts.deleteContactRequest]: () => true,\r\n  [actionsContacts.deleteContactSuccess]: () => false,\r\n  [actionsContacts.deleteContactError]: () => false,\r\n});\r\n\r\nconst error = createReducer(null, {\r\n  [actionsContacts.fetchContactsError]: (_, { payload }) => payload,\r\n  [actionsContacts.addContactError]: (_, { payload }) => payload,\r\n  [actionsContacts.deleteContactError]: (_, { payload }) => payload,\r\n});\r\n\r\nexport default combineReducers({\r\n  items,\r\n  filter,\r\n  loading,\r\n  error,\r\n});","import { createSelector } from '@reduxjs/toolkit';\r\n\r\nconst getItems = state => state.contacts.items;\r\n\r\nconst getFilter = state => state.contacts.filter;\r\n\r\nconst filteredItems = createSelector([getFilter, getItems], (filter, items) => {\r\n  const normalizedFilter = filter.toLowerCase();\r\n\r\n  return items.filter(({ name }) =>\r\n    name.toLowerCase().includes(normalizedFilter),\r\n  );\r\n});\r\n\r\nexport default { getItems, getFilter, filteredItems };\r\n","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport s from './ContactForm.module.css';\r\nimport { toast } from 'react-toastify';\r\n\r\n\r\nclass ContactForm extends Component {\r\n  state = {\r\n    name: '',\r\n    number: '',\r\n  };\r\n\r\n  notifyWarn = text => toast.warn(text);\r\n  notifySuccess = text => toast.success(text);\r\n\r\n  handleChange = e => {\r\n    const { name, value } = e.currentTarget;\r\n    name === 'number'\r\n      ? this.setState({ [name]: value.replace(/[^\\d-]/g, '') })\r\n      : this.setState({ [name]: value });\r\n  };\r\n\r\n  isValidContact = newContact => {\r\n    const name = newContact.name.toLowerCase();\r\n    const { number } = newContact;\r\n    const { items } = this.props;\r\n\r\n    if (name === '' || number === '') {\r\n      this.notifyWarn(`Please enter name and number`);\r\n      return true;\r\n    }\r\n\r\n    if (items.find(contact => contact.name.toLowerCase() === name)) {\r\n      this.notifyWarn(`${newContact.name} is already in contacts.`);\r\n      return true;\r\n    }\r\n  };\r\n\r\n  reset = () => {\r\n    this.setState({\r\n      name: '',\r\n      number: '',\r\n    });\r\n  };\r\n\r\n  handleSubmit = e => {\r\n    e.preventDefault();\r\n\r\n    const newContact = { ...this.state };\r\n    if (!this.isValidContact(newContact)) {\r\n      const { addContact } = this.props;\r\n\r\n      addContact(newContact);\r\n      this.notifySuccess('Added successfully');\r\n      this.reset();\r\n    }\r\n  };\r\n    \r\n  render() {\r\n    const { name, number } = this.state;\r\n      return (\r\n        <form onSubmit={this.handleSubmit} className={s.form}>\r\n        <label className={s.label}>\r\n            Name\r\n             <input\r\n              className={s.input}\r\n              type=\"text\"\r\n              name=\"name\"\r\n              value={name}\r\n              onChange={this.handleChange}\r\n              id={this.nameInputId}\r\n            /> \r\n        </label>\r\n        <label className={s.label}>\r\n            Number\r\n             <input\r\n              className={s.input}\r\n              type=\"text\"\r\n              name=\"number\"\r\n              value={number}\r\n              onChange={this.handleChange}\r\n              id={this.numberInputId}\r\n            /> \r\n        </label>\r\n        <button type=\"submit\" className={s.button}>Add contact</button>\r\n        </form>\r\n      );\r\n  }\r\n};\r\n\r\nContactForm.propTypes = {\r\n  addContact: PropTypes.func.isRequired,\r\n  items: PropTypes.array.isRequired,\r\n};\r\n\r\nexport default ContactForm;\r\n","import { connect } from 'react-redux';\r\nimport { contactsOperations, contactsSelectors } from '../../redux/contacts';\r\nimport ContactForm from './ContactForm';\r\n\r\nconst mapStateToProps = state => ({\r\n  items: contactsSelectors.getItems(state),\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  addContact: newContact => dispatch(contactsOperations.addContact(newContact)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactForm);","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport s from './Filter.module.css';\r\n\r\n\r\nclass Filter extends Component {\r\n    componentWillUnmount() {\r\n        this.props.resetFilter();\r\n    }\r\n    render() {\r\n        const { filter, onChange } = this.props;\r\n        return (\r\n            <div className={s.filter}>\r\n                <label className={s.label} htmlFor=\"\">Find contacts by name\r\n                <input className={s.input}\r\n                        type=\"text\"\r\n                        name=\"filter\"\r\n                        value={filter}\r\n                        onChange={onChange}\r\n                    />\r\n                </label>\r\n            </div>\r\n        );\r\n    }\r\n};\r\n\r\nFilter.propTypes = {\r\n    filter: PropTypes.string.isRequired,\r\n    onChange: PropTypes.func.isRequired,\r\n    resetFiletr: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default Filter;","import { connect } from 'react-redux';\r\nimport { contactsActions, contactsSelectors } from '../../redux/contacts';\r\nimport Filter from './Filter';\r\n\r\nconst mapStateToProps = state => ({\r\n  filter: contactsSelectors.getFilter(state),\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  onChange: e => dispatch(contactsActions.changeFilter(e.currentTarget.value)),\r\n  resetFilter: () => dispatch(contactsActions.resetFilter()),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);","import React from 'react';\r\nimport s from './ContactItem.module.css';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst ContactItem = ({ name, number, onDelete }) => (\r\n  \r\n  <li className={s.item}>\r\n    <span className={s.info}>\r\n      {name}: {number}\r\n    </span>\r\n    <button className={s.delete} onClick={onDelete} type=\"button\">\r\n      X\r\n    </button>\r\n    </li>\r\n);\r\n\r\nContactItem.propTypes = {\r\n  name: PropTypes.string.isRequired,\r\n  number: PropTypes.string.isRequired,\r\n  onDelete: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default ContactItem;","import React from 'react';\r\nimport ContactItem from '../ContactItem';\r\nimport s from './ContactList.module.css';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst ContactList = ({ contacts, deleteContact }) => {\r\n    return (\r\n      <ul className={s.list}>\r\n      {contacts &&\r\n          contacts.map(({ id, name, number }) => (\r\n          <ContactItem\r\n            key={id}\r\n            name={name}\r\n            number={number}\r\n            onDelete={() => deleteContact(id)}\r\n          />\r\n          ))}\r\n    </ul>\r\n  );\r\n};\r\n\r\nContactList.propTypes = {\r\n  contacts: PropTypes.array.isRequired,\r\n  deleteContact: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default ContactList;","import { connect } from 'react-redux';\r\nimport { contactsOperations, contactsSelectors } from '../../redux/contacts';\r\nimport ContactList from './ContactList';\r\n\r\nconst mapStateToProps = state => ({\r\n  contacts: contactsSelectors.filteredItems(state),\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  deleteContact: contactId =>\r\n    dispatch(contactsOperations.deleteContact(contactId)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactList);","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport ContactForm from './components/ContactForm';\nimport Filter from './components/Filter';\nimport ContactList from './components/ContactList';\nimport { connect } from 'react-redux';\nimport { contactsOperations, contactsSelectors } from './redux/contacts/';\nimport { CSSTransition } from 'react-transition-group';\nimport './App.css';\nimport titleTransition from './transitions/title.module.css';\nimport popTransition from './transitions/pop.module.css';\n\nclass App extends Component {\n  componentDidMount() {\n    this.props.fetchContacts();\n  }\n\n  render() {\n    const { items } = this.props;\n\n    return (\n      <div className=\"app\">\n        <CSSTransition\n          in timeout={500}\n          classNames={titleTransition}\n          appear>\n          <h1 className=\"title\">Phonebook</h1>\n        </CSSTransition>\n        <ContactForm />\n        {items.length > 1 &&\n          <CSSTransition\n            in timeout={250}\n            classNames={popTransition}\n            unmountOnExit>\n            <Filter />\n          </CSSTransition>}\n        {items.length > 0 ? (\n          <ContactList />\n        ) : (\n          <p>The contact list is empty. Please add a new contact.</p>\n        )}\n      </div>\n    );\n  }\n};\n\nconst mapStateToProps = state => ({\n  items: contactsSelectors.getItems(state),\n});\n\nconst mapDispatchToProps = dispatch => ({\n  fetchContacts: () => dispatch(contactsOperations.fetchContacts()),\n});\n\nApp.propTypes = {\n  items: PropTypes.array.isRequired,\n  fetchContacts: PropTypes.func.isRequired,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\r\nimport {\r\n    FLUSH,\r\n    REHYDRATE,\r\n    PAUSE,\r\n    PERSIST,\r\n    PURGE,\r\n    REGISTER,\r\n} from 'redux-persist';\r\nimport { contactsReducer } from './contacts';\r\n\r\nconst middleware = [\r\n    ...getDefaultMiddleware({\r\n        serializableCheck: {\r\n        ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\r\n        },\r\n    }),\r\n];\r\n\r\nconst store = configureStore({\r\n    reducer: {\r\n        contacts: contactsReducer,\r\n    },\r\n    middleware,\r\n    devTools: process.env.NODE_ENV === 'development',\r\n});\r\n\r\nexport default store;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css';\nimport store from './redux/store';\nimport { Provider } from 'react-redux';\n\nReactDOM.render(\n        <Provider store={ store }>\n                <App />\n        </Provider>,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}